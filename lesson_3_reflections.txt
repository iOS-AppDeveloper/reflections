When would you want to use a remote repository rather than keeping all your work
local?

    I would want to use a remote repository when collaborating with other 
    people on the same project and/or when the repository contents would be 
    of interest to other people, in order to make it easily accessible.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

	I want to pull changes manually so that I know when they've been added to 
	my local repository and can be aware of any possible conflicts with what
	I'm working on. I might want to postpone doing a pull until I've finished
	what I'm doing.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A clone is a copy of a repository.  It contains all of the commits, branches, and 
    history contained in the original repository.  A local clone of a remote
    repository allows you to work locally on your own machine and independently of
    work that others may be doing on files in the original remote repository.  A fork 
    is a clone that is done on the GitHub website, usually to make a copy of a 
    repository that you don't have permission to change. A fork is a copy that you can 
    modify for your own purposes while not affecting the original repository, but retains
    information about who created the original.  A branch is a label for a commit and 
    identifies modifications to files that are done in parallet with modifications on 
    another branch within the same repository.  A branch can be used to commit changes to
    a repository so they can be tracked while still keeping them separate from other work
    being done on other branches until such time that it makes senses to merge the changes
    together.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    A local copy of the last known state of the remote enables you to view any changes
    that haven't been merged yet with your local branch(es).  You can then decide when
    would be the best time to add those changes to your local repository.  This could 
    be especially helpful if there are conflicts and you don't want to or have time to
    deal with them immediately.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I might try to persuade collaborators to use some other software- or web-based collaboration
    tool.  Without such a tool, I think we would need at least some central location to store
    and view the latest summation of our individual contributions.  We would probably need to
    meet together regularly in a conference call to more efficiently discuss changes, especially
    if the number of collaborators is more than just a few people.  Someone would probably need
    to be desigmated as being responsible for maintaining the latest state of the project by
    incorporating all individual contributor's changes.  This would place a potentially large
    burden on one person.  Getting everyone together at the same time could potentially be 
    efficient in terms of discussing and getting changes approved, but could actually delay
    progress until a time that is convenient for everyone to get together.  In the long run, it
    would be better to use a collaboration tool so that individual contributors can work on the
    project at any time each person chooses, and each individual can incorporate his own change
    into the project once it is approved by other contributors.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
